=head1 1: OO introduced

If you're familiar with the basics of OO, from experience with other languages, you may want to skip 
portions of this chapter. However, I'd still recommend reading it to be sure that you're familiar 
with the terms I'll be using for certain aspects of OO programming (e.g. 'attributes' vs 'properties', 
as well as with the concepts needed to undertand 'vanilla' Perl OO.

=head2 Procedural programming

If you've not had any experience with OO programming, it's very likely that what you've been doing, 
consciously or not, is procedural programming. In procedural languages, such as Perl (prior to Perl 
5), PHP (prior to PHP 4), Visual Basic and the like, code flows from statement to statement in a 'do 
this, then this' kind of way. It's possible to define complex datatypes to represent real-world or 
virtual things, but these are simply dumb collections of attributes with no knowledge of what behaviour 
the thing it represents has. Equally, it's possible to define subroutines to re-use common code, but 
again the subroutines bear no formal relationship to the things the program is dealing with.

For example, we could defineN<All code examples in this chapter will be in something that looks 
rather like Perl but with a few extra keywords, and function prototypes, and without paying too 
much attention to syntactic rigour.> a structure that represents a person:

    $person = { name => "Mike", legs => 2 };
  
We can then define a subroutine C<go_for_walk>:

    sub go_for_walk ( $thing ) {
        say $thing->{name} . " walks on " . $thing->{legs} . " legs."
    }

That's Perl 5.10's C<say> function, because I so hate having to add "\n" at the end of every C<print>. 
Let's go for a walk:

    go_for_walk($person);
    > Mike walks on 2 legs.
    
Now we can define a data structure to represent man's best friend:

    $dog = { name => "Spot", legs => 4 };
  
Spot! Here boy! Walkies!

    go_for_walk($dog);
    > Spot walks on 4 legs.
    
Good dog! Flushed as we are with our (and Spot's) success, let's declare another subroutine that 
allows a person to give a greeting:

  sub give_greeting ( $person ) {
      say $person->{name} . ' says "Hello."';
  }
  
  give_greeting($person);
  > Mike says "Hello."
  
Great. Except that our C<give_greeting> subroutine has no clue about what kind of thing its argument 
is, so when we call:

    give_greeting($dog);
    
we get

    > Spot says "Hello."
    
And suddenly, we have the punchline to one of my favourite jokes.N< There are these two racehorses in a bar. 
One says to the other: "Had a strange day. There I was, dead last in the 3.15 at Epsom, and suddenly, something 
stings me in my rump, whoosh, I started running really fast, finished first by a length."
The second horse says "That's strange. The exact same thing happened to me in the 2.40 at Newmarket."
A greyhound down the other end of the bar pipes up, "You know, the same thing happened to me in the 7.56 at Harringay last night."
First horse looks in shock at second horse. "Blimey! A talking dog!"> 
More importantly, the C<give_greeting> subroutine has allowed a C<Dog> to perform a behaviour (delivering a 
greeting) that it shouldn't be able to do.

That's not so good. We can, though, code round it. Let's add a property C<type> to both our data 
structures, and define another subroutine:

    $person = { name => "Mike", legs => 2,, type => "Person" };
    $dog = { name => "Spot", legs => 4, type => "Dog"};

    sub be_happy ( $thing ) { 
        if ($thing->{type} eq 'Dog') {
            say $thing->{name} . " wags its tail.";
        }
        else {
            say $thing->{name} . " smiles."
        }
    }
    
Cool. Now we have a C<be_happy> subroutine that can handle things of type C<Person> and type C<Dog>. 

Except... suppose we add another type of thing, C<Cat>. We've suddenly got two problems (not to mention 
talking cats!). 

    $cat = { name => "Tiddles", legs => 4, type => "Cat" };
    be_happy($cat);
    > Tiddles smiles.

Not only do we not handle the concept of cats in C<be_happy>, our sloppy coding (the catch-all C<else> construct) means that they actually behave like people!

So, how do we fix this?

Obviously, we could just plough on writing ever more complex conditionals in each of our subroutines, but 
that comes with a greater and greater attendant risk of, to be blunt, screwing it up. Every time we add a 
new datatype, we have to fix every new action subroutine that might be called with it, and conversely, 
every time we add a new action subroutine, we have to make sure we handle every type of thing that might 
be passed to it.

Not pretty. But not to worry...

=head2 Moving towards OO

Let's have another crack at C<be_happy()>, but this time let's make calling the per-thing subroutines a little less error-prone.

    sub be_happy ( $thing ) {
        my $dispatch_table = {
            Cat    => \&be_happy_cat,
            Dog    => \&be_happy_dog,
            Person => \&be_happy_person,
        }
        
        my $be_happy_sub = $dispatch_table->{ $thing->{type} };
        $be_happy_sub->($thing);
    }
    
    sub be_happy_cat ( $cat ) {
        say $cat->{name} . " purrs."
    }
    
    # etc etc
    
Now all we have to do is add a row to the dispatch table for every new object. That's a lot less pain. 
But... wait. In fact, we can do better yet. Because our Perl-like language allows us to define anonymous 
subroutinesN<If this is starting to make your head spin, I suggest a trip back to the 'Modern Perl' book, 
specifically chapter 5's section on anonymous functions.>, we could actually store the C<be_happy_cat> 
code on the cat, like this:

    sub be_happy ( $thing ) {
        return $thing->{be_happy_sub}->{$thing};
    }
    
    $cat = { 
        name => "Tiddles the nearly object-oriented cat",
        legs => 4,
        be_happy_sub => sub { 
            my $self = shift;
            say $self->{name} . " purrs.";
        }
    }
    
    # etc etc
    
Now C<be_happy()> doesn't have to care what type $thing is at all. Better yet, in fact, C<be_happy> doesn't
really need to exist, because we can go:
    
    $thing->{be_happy_sub}->{$thing};
    
and get the desired result, whatever $thing is, provided it has a C<be_happy_sub>. What we've actually 
done here, in fact, is to move the knowledge of how a cat performs C<be_happy> onto the cat itself.

Well, almost. If we create another cat, we do actually have to duplicate all that common-to-every-cat 
code on the new cat, which gets to be a faff after a while. But we can work round that, as well. And 
here's where we start to introduce some OO terminology.

=head3 Classes, Objects, Instances, Attributes and Methods

Tiddles the nearly object-oriented cat, and all other cats, belong to the B<class> "Cat": their behaviours 
are defined because they are C<Cat>s. In OO terms, we say they are B<objects> which are B<instances> of 
the class C<Cat>.

With that in mind, let's actually I<define> a class C<Cat>:

    $Cat = {
        type => "Cat";
        # ...     
    };

    $tiddles = {
        name = "Tiddles the even more nearly OO cat",
        _class => $Cat,
    }
    
In OO parlance, the C<name> field on C<$tiddles> is called a property or an B<attribute>. We (which is 
to say Moose) will use the latter term.

As it stands, that doesn't seem to gain us much. But now we can move the definitions of all the cat-like
behaviours on to the I<class>, rather than the individual I<instance>. In OO parlance, these behaviours are
called B<methods>. So let's go ahead and expand the definition of C<Cat> a bit. In essence, what we're going
to do is reinstate our dispatch table, but instead of using it to pick the right method for a given
object, we're going to use it to pick from between the methods available to an object.

    $Cat = {
        type => "Cat";
        _methods => {
            be_happy => sub {
                my $self = shift;
                say $self->{name} . " purrs."
            },
        }     
    };

This may seem a bit convoluted, but now we can say:

    $tiddles->{_class}->{_methods}->{be_happy}->{$tiddles};
    > Tiddles the even more nearly OO cat purrs.

We can now add or modify methods on C<Cat> as we choose, and all objects that are instances of the 
class will pick them up. Fantastic. Let's add another method, C<new()>:

    $Cat = {
        type => "Cat";
        _methods => {
            be_happy => sub {
                my $self = shift;
                say $self->{name} . " purrs."
            },
            new => sub {
                return { _class => $Cat, @_ };
            },
        }     
    };

What's special about C<new>? It's what's known in OO circles as a B<constructor> method - it allows us 
to create a new I<instance> of a I<class>, like this:

    $tom = $Cat->{_methods}->{new}->( name => "Thomas O'Malley" );
    
    $tom->{_class}->{_methods}->{be_happy}->{$tom};
    > Thomas O'Malley purrs.
    
=head3 Introspection

On top of that, we can now ask an object about itself. This is called B<introspection>. For example, we 
can find out what class it is...

    sub isa {
        my $object = shift;
        my $class = shift;
        return ($object->{_class}->{_type} eq $class);
    }
    print isa($tom, 'Cat') ? "yes" : "no";
    > yes

... or whether it's capable of a certain behaviour...

    sub can {
        my $object = shift;
        my $method = shift;
        
        return exists $object->{_class}->{_methods}->{$method};
    }
    print can($tom, 'bark') ? "yes" : "no";
    > no
    
Hopefully, you're starting to get the idea. However, this approach to OO still isn't perfect. Among 
other things, the syntax is clunky, and the methods on our classes are all anonymous subroutines, 
which is going to make things like debugging hard. On top of that, our methods are actually defined 
at run-time, rather than compile time, which makes for some interesting issues. 
    
=head2 Doing it properly.

Ideally what we'd like is to be able to say 'this collection of methods define this class', and at the
same time 'this variable represents an instance of this class', and then let the language handle the 
nitty-griity details of calling methods for us with out all this complex looking up of things in the
class dispatch table.

Let's imagine a Perl-ish syntax in which this was possible

    class Cat {
        method be_happy {
            say $self->{name} . " purrs.";    
        }
    
        method give_greeting {
            say $self->{name} . " winds around your ankles.";
        }
    }
    
Note that the C<class Cat;> declaration defines the name of our class, and 
that the methods are simply declared as a subroutine (but using a C<method> keyword) within the class. 
Also note that each method gets the variable C<$self>, which references the object it was called on.
This then allows us to call the methods using a pretty familiar syntax:

    $tom->give_greeting();
    > Thomas O'Malley winds around your ankles.

The important thing to notice here is that we don't pass $tom as an argument. Because we're calling 
C<give_greeting> as a I<method> on an object, our language does it for us - the object is automagically 
passed into the method as $self without us having to do anything.

You may notice that we haven't yet adressed the twin questions of 'how does C<$tom> know it's an instance
of class C<Cat>?' and 'how do we create a new instance of class C<Cat>'. 

Let's, for the sake of argument, assume that declaring C<class Cat> gives us a magic C<new()> method
N<In OO parlance, this is a B<class method> - our language allows us to call a method on a class name.>
for free, which allows us to create an object via

    my $tom = Cat->new();
    
and, more importantly, the instance of C<Cat> that gets returning I<knows> it's a C<Cat>, and thus
what method code to run. 

=head3 Encapsulation, attributes and accessors.

Another key tenet of OO programming is the concept of B<encapsulation>. Encapsulation basically says
that the internal implementation of your object should be hidden from your users. Their access to the the 
object should be only via the methods you define on it, not by making assumptions about the data structure
that represents it. One key advantage of this is that it allows you to re-implement (or B<refactor>) the
internals of the object without your users having to change the code that calls it. 

Why's this important? Well, you may well have noticed that our implementation of C<Cat> doesn't yet
cater for storing attributes like C<name> and C<legs> - in fact, we quietly glossed over the question of
how Thomas O'Malley got his name in our example above. It's pretty likely, in fact, that our C<Cat> 
object is still a hashref, albeit with some magical properties, so we may well wind up going

    $tom->{name} = "Thomas O'Malley";

Except that that's a cardinal sin in OO programming - we've broken encapsulation, by assuming that 
C<Cat> will always be a hashref, and that we can always safely trample on its C<name> field.

The conventional way around this is to provide B<accessor methods> for attributes. For example:

    class Cat {
        method name ($name, $value? ) {
            if (defined $value) {
                $self->{name} = $value;
            }
            return $self->{name};    
        }    
    }
    
And then we can go:
    
    my $tom = Cat->new;
    $tom->name("Thomas O"Malley);
    say $tom->name();
    > Thomas O'Malley

Notice that C<name()> allows us to both get and set the C<name> atribute: in OO terms, it's both a 
B<getter> and B<setter> method. This is merely a convention: we could have provided separate methods
for each, called (say) C<get_name()> and C<set_name()>. Either way, we've removed the need for users
of our class to know how attributes are stored.
N<Also notice that there's still actually nothing that stops us accessing a C<Cat> object as a hashref.
Our language will not prevent us breaking encapsulation if we want to. There are those 
who consider this to be a Bad Thing. Whether it is or not isn't a subject for this chapter, and possibly 
not even for this book, other than to note that by the time you've read this book you should be sufficiently
well-versed in the object-oriented approach to doing things that the mere I<thought> of doing so in a 
program you write should be ringing massive alarm bells. Yes, we let you shoot yourself in
the foot by breaking encapsulation, just as real life lets you point a loaded, large-calibre handgun 
at one of your lower extremities and pull the trigger. In both cases, you I<should> know better.>

However, that's a bit ugly. So let's define another keyword in our little language to allow us to
declare that an object C<has> an attribute, and please could the language declare an accessor
method for it without us having to bother? Something like this, maybe?

    class Cat {
        has 'name';
        has 'legs';
        
        method be_happy {
            say $self->name . " purrs.";
        }
    }

=head2 Polynorphism

"What," I hear you ask, "on earth is polymorphism, and why should I care?" Actually, we've already 
been using the concept without realising it. I<Polymorphism> basically says that we can call
a given method on an object without knowing what the object is, merely that it implements the 
method, and we'll get an appropriate behaviour for the type of object. For example:

    class Person {
        method take_for_walk ( $thing ) {
            say $self->name . " takes " . $thing->name . " for a walk.";
            $thing->go_for_walk();
            $thing->be_happy();
        }
    }
    
Now, as long as C<$thing> can do the C<name()>, C<go_to_walk()> and C<be_happy()> methods, 
C<take_for_walk()> will work, I<without> knowing or caring anything about the object it's been 
passed. Like this:

    $me = Person->new( name => "Mike", legs => 2 );
    $cat = Cat->new( name => "Tom", legs => 4 );

    $me->take_for_walk($cat);

In the best traditions of this kind of book, the output is left as an exercise for the reader.N<I always 
wanted to say that in a book.>

=head2 Inheritance

You may have noticed, perhaps, that despite our best efforts there's still quite a lot of duplicated 
code in our little menagerie of objects. They all have legs, and a name, and they can all walk, for
example: in fact, they're all animals. Wouldn't it be neat if we could say something like this

    class Animal {
        has 'name';
        has 'legs';
        
        method go_for_walk () {
            say $self->name . " walks on " . $self->legs . " legs."
        }
        
        method be_happy () {
            say $self->name . " is happy.";
        }
    }
    
and then have all our C<AAnimal>'s pick up from that class. Well, in fact, we can. In OO terms, this
is known as C<inheritance>, our C<Animal> class is a B<parent> class or B<superclass>, and our C<Cat>
etc. classes that inherit behaviours from it (we can also say they B<extend> the behaviour of the
parent class) are its B<subclasses> or B<children>. Let's add the C<extenbds> keyword to our little
language - it's easy:

    class Cat extends Animal {
    }
    
If that's all we did, then we'd have a class that behaved like C<Animal> in I<all> respects except 
that if we asked it what class it's an instance of, it's a C<Cat>.  

Which is all very well, except that that C<be_happy()> method on the parent class is a bit generic 
for cats. So lets define a C<be_happy()> method on the C<Cat> class itself:

    class Cat extends Animal {
        method be_happy () {
            say $self->name . " purrs.";
        }
        
        method miaow () {
            say $self->name . " miaows.";
        }
    }

The C<be_happy()> method on C<Cat> is said to B<override> the one on the parent class. 

There's nothing to stop us having classes several deep, with long B<inheritance trees>. 
For example:

    class Person extends Animal {
        # ...
    }
    
    class Student extends Person {
        # ....
    }
    
=head2 UNIVERSAL
    
Remember a few paragraphs up, we mentioned asking an object what class it is. That sounds like
a method of some sort, doesn't it. In fact, it sounds like the C<isa()> function we defined
way back when we were attempting to figure out why OO was a neat thing. But the question is, 
which class should we define it on? 

Actually, it turns out the best way to do it is to have a class that all classes inherit
from (magically, as part of our little OO language), right at the root of their inheritance 
tree. On this universal class (which for want of a better name, we'll call C<UNIVERSAL>) 
we can imagine a couple of methods being defined for us.

    class UNIVERSAL {
        method isa ($class) {
            # some magic that checks if $self is a member of $class
        }
        
        method can ($method) {
            # some magic that checks if $self can perform $method
        }
    }

And then we can say:

    my $cat = Cat->new( ... );
    say ($cat->isa('Cat') ? "yes" : "no";
    say ($cat->can('miaow') ? "yes" : "no";
    
    > yes
    > yes
    
Now, here's an interesting question. What happens if we do this?

    say ($cat->can('go_for_walk') ? "yes" : "no";
    say ($cat->isa('Animal') ? "yes" : "no";

Obviously, a C<Cat> can C<go_for_walk()>. But what about the second one? It's a C<Cat>, right?
Well yes. But it's also an C<Animal>, because if it wasn't, it couldn't <C<go_for_walk()>. It
makes sense for C<isa($class)> to return true for any C<$class> in its inheritance tree
right the way back to the magic C<UNIVERSAL> class. 

Which means of course, that a C<Cat> C<can('can')>. 

=head2 Wrapping it all up.

So, there you have it. We've created a few little language extensions to somerthing that started 
out looking a lot like Perl, that allow us to define classes and objects and generally do OO 
programming. 

So, how would we go about implementing this in Perl?

As you can see from our initial clumsy attempts to make Tiddles (the nearly object-oriented
cat), it gets pretty complex.prety quickly, and we didn't even I<try> to implement any form
of inheritance. Fortunately, as of Perl 5, Perl does some of this for you. However, it 
doesn't (by any stretch of the imagination) do it all, and vanilla Perl OO does leave you 
spending more time handling some of the nits and bolts of things like accessor inheritance
thank you do geting on with what you're paid to do, namely write good OO code.

Over the course of the intervening decade or more since the advent of Perl 5, an awful 
lot of helper classes (of varying degrees of sophistication and/or insanity) have sprung 
up to attempt to minimise the pain of the whole process of doing OO in Perl. 

And in the next chapter, we'll start learning about one of them. If you haven't figured
out which one, go read the title of the book again.
=cut